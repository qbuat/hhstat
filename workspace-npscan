#!/usr/bin/env python
# ---> python imports		
from multiprocessing import Process
import pickle
import os
import logging

# ---> rootpy imports
from rootpy.io import root_open
from rootpy import asrootpy

# ---> higgstautau imports
# from higgstautau.pbs import qsub

# ---> local imports
from hhstat.parallel import run_pool
from hhstat.nuisance import NuisParScan

log = logging.getLogger(os.path.basename(__file__))

NP_TESTED_VALS = [0.2 * i for i in range(-25, 26)] #range(-5,6)

def scan_np(
    file_name, ws_name, 
    np_name, pickle_name, n_jobs):
    '''
    Scan a given nuisance parameter
    Parameters
    ----------
    # file_name: name of the rootfile, str
    # ws_name: name of workspace, str
    # np_name: name of the nuisance parameter, str
    # n_jobs: number of jobs run in //, int
    '''
    with root_open(file_name) as file:
        ws = file[ws_name]
        roo_min = asrootpy(ws).fit()
        fitres = roo_min.save()
        minNLL_hat = fitres.minNll()
        log.info('minimized NLL: %f' % minNLL_hat)
        mc = ws.obj('ModelConfig')
        obsData = ws.data('obsData')
        ws.saveSnapshot('StartingPoint', mc.GetPdf().getParameters(obsData))
        
        # define the workers
        workers = []
        for val in NP_TESTED_VALS:
            workers.append(NuisParScan(
                    pickle_name, ws, mc,
                    np_name, val,
                    ws_snapshot='StartingPoint'))

        # run the pool
        run_pool(workers, n_jobs=n_jobs)

if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--nuis', default='alpha_ATLAS_BR_tautau')
    parser.add_argument('--jobs', type=int, default=-1)
    parser.add_argument('--name', default='combined')
    parser.add_argument('file')
    args = parser.parse_args()

    log.info(args.file)
    pickle_name = os.path.splitext(args.file)[0] + '_{0}_scan.pickle'.format(args.nuis)

    scans = []
    if os.path.exists(pickle_name):
        os.remove(pickle_name)
    with open(pickle_name, 'w') as pickle_file:
        pickle.dump(scans, pickle_file)
        
    scan_np(args.file, args.name, args.nuis, pickle_name, args.jobs)
